name: CRD

on:
  # This section configures the manual trigger to ask for an input.
  workflow_dispatch:
    inputs:
      auth_code:
        description: 'Chrome Remote Desktop Auth Code'
        required: true
        type: string

jobs:
  build:
    name: Start Building...
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Download & Install Chrome Remote Desktop
        # CORRECTED URL: 'chromeremotedesktop' instead of 'chromotedesktop'
        run: |
          Invoke-WebRequest -Uri "https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi" -OutFile "chromeremotedesktophost.msi"
          Start-Process msiexec.exe -Wait -ArgumentList '/i chromeremotedesktophost.msi /quiet'

      - name: Start Chrome Remote Desktop Host
        # CORRECTED PATH: '${env:ProgramFiles(x86)}' instead of '${env:ProgramFiles(x88)}'
        # The --code argument uses the input provided when the workflow was started.
        run: |
          & "${env:ProgramFiles(x86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe" --code="${{ github.event.inputs.auth_code }}" --redirect-url="https://remotedesktop.google.com/_/oauthredirect" --name="$env:COMPUTERNAME" --pin=112233

      - name: Time Counter
        run: |
          # Simple PowerShell timer for 6 hours (21600 seconds)
          $startTime = Get-Date
          $endTime = $startTime.AddSeconds(21600)
          Write-Host "Timer started at $startTime"
          while ((Get-Date) -lt $endTime) {
            $elapsed = (Get-Date) - $startTime
            Write-Host "Elapsed time: $($elapsed.Hours)h $($elapsed.Minutes)m $($elapsed.Seconds)s"
            Start-Sleep -Seconds 60  # Update every minute
          }
          Write-Host "Timer completed after 6 hours at $(Get-Date)"

      - name: Keep Alive
        run: |
          # Set duration to 6 hours (21600 seconds)
          $duration = 21600
          $interval = 300  # Check every 5 minutes (300 seconds)
          $endTime = (Get-Date).AddSeconds($duration)

          Write-Host "Starting keep-alive loop for 6 hours..."
          while ((Get-Date) -lt $endTime) {
            Write-Host "Workflow is still alive at $(Get-Date)"
            Start-Sleep -Seconds $interval
          }
          Write-Host "Keep-alive completed after 6 hours."
