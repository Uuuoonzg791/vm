name: GSMX5

on:
  workflow_dispatch:
    inputs:
      register_email:
        description: 'Your getscreen.me account email'
        required: true
        type: string

jobs:
  build:
    strategy:
      # This ensures that if one runner fails to install, the others will continue running.
      fail-fast: false
      matrix:
        runner_id: [1, 2, 3, 4, 5]

    name: Start Runner ${{ matrix.runner_id }}
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Download getscreen.me Agent
        # CORRECTED URL: The download path is now /downloads/ instead of /bin/
        run: |
          Invoke-WebRequest -Uri "https://getscreen.me/downloads/getscreen.msi" -OutFile "getscreen.msi"

      - name: Install and Configure getscreen.me Agent
        run: |
          # Create a unique name for each runner to identify it in your getscreen.me dashboard.
          $COMPUTER_NAME = "GH-Runner-${{ matrix.runner_id }}-${env:COMPUTERNAME}"
          
          # Prepare the configuration string. This includes the dynamic name and other useful defaults for unattended access.
          $CONFIG_STRING = "name='$COMPUTER_NAME' language=en autostart=true nonadmin=true control=true file_transfer=true disable_confirmation=true auto_wallpaper_hide=true"
          
          # Construct the full argument list for the installer.
          $MSI_ARGS = "/i getscreen.msi /qn REGISTER='${{ github.event.inputs.register_email }}' CONFIG=`"$CONFIG_STRING`""
          
          # Execute the silent installation.
          Write-Host "Starting installation with arguments: $MSI_ARGS"
          Start-Process msiexec.exe -Wait -ArgumentList $MSI_ARGS

      - name: Keep Alive
        run: |
          # This keep-alive runs independently in each job to keep the session active.
          $duration = 21600
          $interval = 300
          $endTime = (Get-Date).AddSeconds($duration)
          Write-Host "Starting keep-alive loop for 6 hours..."
          while ((Get-Date) -lt $endTime) {
            Write-Host "Workflow for runner ${{ matrix.runner_id }} is still alive at $(Get-Date)"
            Start-Sleep -Seconds $interval
          }
          Write-Host "Keep-alive completed after 6 hours."
