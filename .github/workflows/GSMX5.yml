name: GSMX5
on:
  workflow_dispatch:
    inputs:
      register_email:
        description: 'Your getscreen.me account email'
        required: true
        type: string

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        runner_id: [1, 2, 3, 4, 5]

    name: Start Runner ${{ matrix.runner_id }}
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Download getscreen.me Agent
        run: |
          Invoke-WebRequest -Uri "https://getscreen.me/downloads/getscreen.msi" -OutFile "getscreen.msi"

      - name: Install, Configure, and Start getscreen.me Agent
        run: |
          # --- INSTALLATION ---
          $COMPUTER_NAME = "GH-Runner-${{ matrix.runner_id }}-${env:COMPUTERNAME}"
          $CONFIG_STRING = "name='$COMPUTER_NAME' language=en autostart=true nonadmin=true control=true file_transfer=true disable_confirmation=true auto_wallpaper_hide=true"
          $MSI_ARGS = "/i getscreen.msi /qn REGISTER='${{ github.event.inputs.register_email }}' CONFIG=`"$CONFIG_STRING`""
          Write-Host "Starting installation with arguments: $MSI_ARGS"
          Start-Process msiexec.exe -Wait -ArgumentList $MSI_ARGS
          Write-Host "Installation command completed."

          # --- POST-INSTALLATION & VERIFICATION (CRITICAL FIXES) ---
          
          # 1. Add firewall rule for the agent executable.
          $AGENT_EXECUTABLE = "${env:ProgramFiles(x86)}\GetScreen\getscreen.exe"
          Write-Host "Adding firewall rule for $AGENT_EXECUTABLE"
          New-NetFirewallRule -DisplayName "Allow getscreen.me Agent" -Direction Outbound -Program $AGENT_EXECUTABLE -Action Allow
          
          # 2. Dynamically find the service by pattern and start it. This is the key fix.
          Write-Host "Searching for the getscreen service..."
          $service = Get-Service -Name "*getscreen*" -ErrorAction SilentlyContinue
          
          if ($null -eq $service) {
              Write-Error "FATAL: Could not find any service with 'getscreen' in the name after installation."
              exit 1
          }
          
          Write-Host "Found service: $($service.Name). Starting it now..."
          Start-Service -InputObject $service
          
          # 3. Wait for the service to initialize and connect to the dashboard.
          Write-Host "Waiting 20 seconds for the agent to register online..."
          Start-Sleep -Seconds 20
          
          # 4. Verify that the service is running correctly.
          $service.Refresh() # Refresh the service object to get the latest status
          if ($service.Status -ne "Running") {
              Write-Error "The service $($service.Name) failed to start. Current status: $($service.Status)"
              exit 1
          } else {
              Write-Host "Successfully verified that the service $($service.Name) is running."
          }

      - name: Keep Alive
        run: |
          $duration = 21600
          $interval = 300
          $endTime = (Get-Date).AddSeconds($duration)
          Write-Host "Starting keep-alive loop for 6 hours..."
          while ((Get-Date) -lt $endTime) {
            Write-Host "Workflow for runner ${{ matrix.runner_id }} is still alive at $(Get-Date)"
            Start-Sleep -Seconds $interval
          }
          Write-Host "Keep-alive completed after 6 hours."
